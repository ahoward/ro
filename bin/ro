#! /usr/bin/env ruby
Main do
  def run
    help!
  end

  mode(:build) do
    def run
      # require 'ak47'
      # opts = { watch_dirs: Ro.root }
      # Ak47() { build! }
      build!
    end

    def build!
      # puts "### building #{Ro.root}..."
      indexen = {}
      build_dir = './api'

      ro.collection.each do |node|
        type = node.type
        id = node.id

        json = JSON.pretty_generate(node.as_json)

        path = File.join(build_dir, type, id) + '.json'
        binwrite(path, json)
        puts path

        indexen[type] ||= []
        indexen[type].push(id)
      end

      indexen.each do |type, collection|
        path = File.join(build_dir, type) + '.json'
        json = JSON.pretty_generate('type' => type, 'collection' => collection)
        binwrite(path, json)
        puts path
      end
    end

    def binwrite(path, data)
      FileUtils.mkdir_p(File.dirname(path))
      IO.binwrite(path, data)
    end
  end

  mode(:console) do
    def run
      # Ro.root = params['root'].value if params['root'].given?
      require "#{$libdir}/ro/console.rb"
      Ro::Console.start!
    end
  end

  mode(:cat) do
    argument('identifier')

    def run
      set_root!

      identifier = params['identifier'].value

      result = ro[identifier]

      result = if result.respond_to?(:as_json)
                 result.as_json
               else
                 { identifier => result }
               end

      puts JSON.pretty_generate(result)
    end
  end

  def set_root!
    Ro.root = params['root'].value if params['root'].given?
  end
end

BEGIN {
  require 'main'

  $bindir = File.dirname(__FILE__)
  $libdir = File.expand_path("#{$bindir}/../lib/")

  require "#{$libdir}/ro.rb"
}
