#! /usr/bin/env ruby
# encoding: utf-8

Ro.script do
  help <<~____
    NAME
      ro

    TL;DR;
      # boot a console
      #
        ~> ro console

      # build a static API
      #
        ~> ro build

      # keep building a static API on change
      #
        ~> ro build --watch

      # run a local http server that re-builds the API on change
      #
        ~> ro server

    ENVs
      # the location of your ro data
      #
        export RO_ROOT=...

      # the url, under which, your ro data will ultimately be found under, including any sub path_info
      #
        export RO_URL=...
  ____

  run do
    help!
  end

  run(:console) do
    setup!

    console!
  end

  run(:build) do
    setup!

    if opts.fetch(:watch)
      watch(Ro.config.root) { build! }
    else
      build!
    end
  end

  run(:server) do
    setup!

    server!
  end

  def console!
    require "#{$libdir}/ro/script/console.rb"

    Ro::Script::Console.run!(script: self)
  end

  def build!
    require "#{$libdir}/ro/script/builder.rb"

    Ro::Script::Builder.run!(script: self)
  end

  def server!
    require "#{$libdir}/ro/script/server.rb"

    Ro::Script::Server.run!(script: self)
  end

  def setup!
    root = @options[:root]
    Ro.root = root if root

    port = Ro.cast(:int, (@options[:port] || @options[:p] || ENV['PORT'] || Ro.config.port))
    opts.set(:port, port)

    watch = Ro.cast(:bool, @options[:watch] || @options[:w])
    opts.set(:watch, watch)
  end

  def opts
    @opts ||= Map.new
  end

  def watch(directory, &block)
    require 'ak47'

    def File.exists?(...) # monkey patch for Ak47 ;-/
      File.exist?(...)
    end

    Ak47(watch_dirs: directory) do
      block.call
    end
  end
end

BEGIN {
  $stdout.sync = true
  $stderr.sync = true

  $script = File.expand_path(__FILE__)
  $bindir = File.dirname($script)
  $root = File.dirname($bindir)
  $libdir = File.join($root, 'lib')

  Dir.chdir($root)

  require "#{$libdir}/ro"
  require "#{$libdir}/ro/script.rb"
}
