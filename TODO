

- simply collections



- support promise based api and fast build
- @attributes madness

- README.md
  - mcms
  - edit content using gh at the ui
  - content renders directly input public
  - workflow

- workflow
  - runs 1x/day


- simple js lib for content is included in public/ro.js
  - ro.collections()
  - ro.collections('posts')
  - ro.collections('posts')()
  - ro.collections('posts')('first-post')


interface

- arrayfields?
- map
- main?

- git-lfs
    public/ro/*/*/assets/**

ro.collections -> all collections

dir.glob(**).map Collection.new(root, name)

ro.collections['posts'] do |collection|
end

ro.collections.get('posts').get('first-post') -> that node
ro.collections['posts']['first-post'] -> that node
ro.collections.posts.first-post -> that node

console : def ro; ro.collections; end

# enumerable mixin for to_a, etc
# to_hash
#each


- no dependencies

- what does build do?
  - ./public/ro -> ./public/api
    - ./public/api/index.html
      - list of collections
        - {'posts' => {'count' => 42, 'first' => 'posts/first-post', 'last' => 'posts/last-post' }
        - {'snippets' => {'count' => 42, 'first' => 'posts/first-post', 'last' => 'posts/last-post' }
      ./public/api/posts/first-posts/attributes.yml
      /ro/posts/index/attributes.yml <- error!

    - sorts for collection
      - published_at
      - draft: true
      - hidden: true
      - name

    ro.yml
    root:
      ./ro
    build:
      directory = ./api
      page:
        size: 10

    api/index.html
    api/posts/index.html
    api/posts/index/0.html
    api/posts/index/1.html
    api/posts/first-posts/index.html
    /ro/posts/first-posts/assets.png

  - ro/api
    - is reserved
  - builds items
    - ro/api/posts/first-post/index.json
  - builds index in pages?
    - ro/api/posts/index.json
    - ro/api/posts/index/0.json
    - ro/api/posts/index/1.json

x path.join

- remove all support for erb?
- tear out cycle detection?

- bin/ro

- remove caching
- missing src attr in assets?
- remove the dep on main
- where does build go.... ? into 
- fix ro model?
- refactor utils


x support for absolute urls
x RO_URL=

- assets are promises too
- root.nodes is not re-entrant, loading nodes, should never trigger loading nodes....
- ensure loading from the root loads exactly one time
- no caching, because simple

- root.nodes is a promise
- root.@nodes is a map of collections ?
- root.collections
- @nodes = List.new
- ro.nodes.posts promises to promose('posts'){ load_list('posts') }


- better cli?
- ./lib/script
- ro build
- ro clean
- ro watch (dir)
- root.build!


- ro/pages/home/index.html.erb
- <% layout = ro.layouts.default %>
- <%= layout.header %>
- <%= layout.footer %>

- better / more specific errors for CLI ?
- error boundary?
- support for building
- support for watching

- functional *except*for Ro.cache
- Kernel.ro === Ro.root('./ro', :url => '/ro')
- Ro.root === Ro.root('./ro', :url => '/ro')
- Ro.nodes === Ro.root('./ro', :url => '/ro').nodes


- https://data.mtf-trek.com/ro/team/marci/api.json
-  https://data.mtf-trek.com/ro/team/marci/api/data.json

-  https://mtf-trek-data.com/ahoward/ro/team/marci/api/data.json
- gh-pages
- ./bin/ro build

-  https://api.mtf-trek.com/ro/team/marci.json
./script/build -> ./public/ro/team/marci.json

-  https://api.mtf-trek.com/ro/team.json

- workflow to build... jecky hack?
